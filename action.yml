---
name: tox
description: Run tox
author: Sviatoslav Sydorenko <wk+tox-dev/gh-action-tox@sydorenko.org.ua>

branding:
  icon: code
  color: blue

inputs:
  target:
    default:
    description: Regex to filter the tox envs, required
    required: false

  python-version:
    default: >-
      3.10
    description: Python version to use as the current tox runtime
    required: true

  deadsnakes:
    default: false
    description: >-
      Install Python from the deadsnakes repository if true,
      use a GitHub-packaged distribution otherwise
    required: false

  version:
    default: tox
    description: tox with version spec for pip
    required: false

outputs:
  json-results:
    value: ${{ steps.json-results.outputs.json-results }}

runs:
  using: composite
  steps:
  - name: Determine whether the use of deadsnakes PPA has been requested
    id: deadsnakes
    if: >-
      (
        fromJSON(inputs.deadsnakes)
        || endsWith(inputs.python-version, '-dev')
      )
      && runner.os == 'Linux'
    run: >-
      echo '::set-output name=requested::true'
    shell: bash
  - name: Set up outer pip settings
    id: pip-settings
    if: steps.deadsnakes.outputs.requested != 'true'
    run: >-
      echo '::set-output name=global-args::--user'
    shell: bash
  - name: >-
      Set the active Python interpeter to ${{ inputs.python-version }}
      from GitHub-provided repositories
    if: steps.deadsnakes.outputs.requested != 'true'
    uses: actions/setup-python@v2
    with:
      python-version: ${{ inputs.python-version }}
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
  - name:
      Set the active Python interpeter to ${{ inputs.python-version }}
      from the deadsnakes Ubuntu PPA repositories
    if: steps.deadsnakes.outputs.requested == 'true'
    uses: deadsnakes/action@v2.1.1
    with:
      python-version: ${{ inputs.python-version }}
  # TODO: integrate bindep?
  - name: Install packaging tools
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
    run: |
      echo '::group::Preparing the outer Python env for tox'
      python -m pip install ${{ steps.pip-settings.outputs.global-args }} -U \
        wheel
      python -m pip install ${{ steps.pip-settings.outputs.global-args }} -U \
        pip-with-requires-python setuptools
      python -m pip install ${{ steps.pip-settings.outputs.global-args }} -U \
        virtualenv
      echo '::endgroup::'
    shell: bash
  - name: Install tox
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
    run: |
      echo '::group::Installing tox: ${{ inputs.version }}'
      python -m pip install ${{ steps.pip-settings.outputs.global-args }} -U \
        '${{ inputs.version }}'
      echo '::endgroup::'
    shell: bash
  - uses: actions/checkout@v2
  - name: Prepare tox env '${{ inputs.target }}'
    run: >
      echo '::group::Preparing tox environment'


      python -m
      tox
      --parallel auto
      --parallel-live
      -vv
      --notest


      echo '::endgroup::'
    shell: bash
    env:
      PIP_DISABLE_PIP_VERSION_CHECK: 1
      PIP_NO_PYTHON_VERSION_WARNING: 1
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
      TOXENV: ${{ inputs.target }}
  - name: Prepare tox results directory for '${{ inputs.target }}'
    id: tox-results
    env:
      PYTHONPATH: ${{ github.action_path }}/src
    run: python -m make_tmp_dir '${{ github.action_path }}'
    shell: bash
  - name: Run tox env '${{ inputs.target }}'
    run: >
      echo '::group::Executing tox environment commands'


      python -m
      tox
      --parallel auto
      --parallel-live
      -vv
      --result-json '${{ steps.tox-results.outputs.results-file }}'


      echo '::endgroup::'
    shell: bash
    env:
      PY_COLORS: 1
      TOX_PARALLEL_NO_SPINNER: 1
      TOXENV: ${{ inputs.target }}
  - uses: actions/setup-python@v2
    if: always()
    with:
      python-version: '3.10'
  - name: Save JSON results
    if: always()
    id: json-results
    env:
      PYTHONPATH: ${{ github.action_path }}/src
    run: >-
      python -m save_tox_results_as_output
      '${{ steps.tox-results.outputs.results-file }}'
    shell: bash
    # TODO: move clean-up to a subaction?
    # Ref: https://github.com/actions/runner/issues/1478#issuecomment-975703207
  - name: >-
      Clean-up the results directory at ${{ steps.tox-results.outputs.results-dir }}
    if: always()
    env:
      PYTHONIOENCODING: utf-8
      PYTHONLEGACYWINDOWSSTDIO: utf-8
      PYTHONPATH: ${{ github.action_path }}/src
    run: >-
      python -m cleanup_tox_results_dir
      '${{ steps.tox-results.outputs.results-dir }}'
    shell: bash
  - name: Log results
    if: always()
    env:
      PYTHONPATH: ${{ github.action_path }}/src
    run: |
      python -m inspect_tox_results \
      "$(cat << EOM
        ${{ steps.json-results.outputs.json-results }}
      EOM
      )" \
      "$(cat << EOM
        ${{ matrix.toxenv }}
      EOM
      )"
    shell: bash
  - name: Reset the active Python interpeter to ${{ inputs.python-version }}
    uses: actions/setup-python@v2
    with:
      python-version: ${{ inputs.python-version }}


  # Global env seems to only be supported in docker actions but not composite
  # env:
  #   PY_COLORS: 1
  #   TOX_PARALLEL_NO_SPINNER: 1
...
